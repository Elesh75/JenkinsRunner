@Library('SharedLibrary') _
     pipeline {
        agent any
        tools {
            maven "mvn"
        }
        stages {
            stage('Checkout') {
                steps {
                    echo 'Cloning Code...'
                    git 'https://github.com/Elesh75/maven-web-application'
                }
            }
            stage('Build') {
                steps {
                    echo 'Building the project...'
                    common("Build")
                }
            }
            stage('Test') {
                steps {
                    echo 'Running tests...'
                    common("SonarQube Report")
                }
            }
            stage('Deploy') {
                steps {
                    echo 'Uploading Package...'
                    common("Upload Into Nexus")
                }
            }

                        stage('Build Docker Image') {
                steps {
                    sh 'pwd'
                    // Build a Docker image with the WAR artifact
                    script {
                        def dockerImage = 'my-app:latest'  // Customize the image name and tag
                        def dockerfile = '''
                            FROM tomcat:9-jdk11-openjdk-slim
                            COPY ./target/tesla.war /usr/local/tomcat/webapps/
                            EXPOSE 8080
                            CMD ["catalina.sh", "run"]
                        '''
                    
                            // Write the Dockerfile to a temporary file
                            def dockerfileContent = dockerfile.toString()
                            writeFile file: 'Dockerfile', text: dockerfileContent
                    
                            // Build the Docker image
                            docker.build(dockerImage, "--file Dockerfile .")
                    }
                }
            }  

            stage('Containerizing our application') {
                steps {
                    echo 'Building Image...'
                    sh "docker buildx build -t jen ."
                }
            }
             stage('Push to image registry') {
                steps {
                    echo 'Uploading Image to refgistry...'
                    sh "docker push skate754/jen:1"
                }
            }
       } 
    }
